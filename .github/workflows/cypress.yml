name: Cypress Tests for Helpdesk API

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:    # Executa diariamente às 2:00 AM UTC
    - cron: "0 2 * * *"

jobs:
  cypress-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Instalar dependências
        run: npm ci

      - name: Setup Helpdesk API
        if: success() && !cancelled()
        run: |
          # Tenta clonar a API Helpdesk
          if git clone https://github.com/automacaohml/helpdesk-api.git api; then
            echo "✅ Repositório da API clonado com sucesso"
            cd api
            
            # Instala dependências da API
            npm install
            
            # Inicia a API em background
            nohup npm start > ../api.log 2>&1 &
            echo "✅ API iniciada em background"
            
            # Aguarda um momento para a API inicializar
            sleep 5
            
          else
            echo "⚠️ Não foi possível clonar a API, assumindo API já rodando"
          fi

      - name: Aguardar API estar disponível
        run: |
          echo "🔄 Aguardando API ficar disponível..."
          
          # Aguarda até 60 segundos pela API
          for i in {1..30}; do
            if curl -s http://localhost:3000/ > /dev/null 2>&1 || 
               curl -s http://localhost:3000/health > /dev/null 2>&1 || 
               curl -s http://localhost:3000/users > /dev/null 2>&1; then
              echo "✅ API disponível na porta 3000"
              break
            fi
            echo "Tentativa $i/30 - Aguardando API..."
            sleep 2
          done
          
          # Verifica se API está realmente funcionando
          echo "Testando endpoints da API..."
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Health endpoint OK"
          elif curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Root endpoint OK" 
          elif curl -f http://localhost:3000/users > /dev/null 2>&1; then
            echo "✅ Users endpoint OK"
          else
            echo "❌ Erro: Nenhum endpoint da API está respondendo"
            cat api.log
            exit 1
          fi

      - name: Debug - Verificar status da API
        if: always() && !cancelled()
        run: |
          echo "=== Status da API ==="
          curl -s http://localhost:3000/health || echo "Health endpoint não disponível"
          curl -s http://localhost:3000/users || echo "Users endpoint não disponível"
          ps aux | grep node || echo "Nenhum processo Node encontrado"

      - name: Executar testes Cypress
        if: always() && !cancelled()
        continue-on-error: true
        run: |
          echo "🚀 Iniciando testes de API com Cypress"
          
          # Cria diretórios necessários
          mkdir -p cypress/reports
          
          # Executa Cypress para testes de API (headless por padrão)
          npx cypress run \
            --reporter mochawesome \
            --reporter-options "reportDir=cypress/reports,reportFilename=mochawesome-api,overwrite=false,html=false,json=true" \
            --config "video=false,screenshotOnRunFailure=false,defaultCommandTimeout=10000,requestTimeout=15000" \
            || {
              echo "⚠️ Cypress falhou, mas continuando para gerar artifacts..."
              # Cria um relatório básico para evitar falhas downstream
              echo '{"stats":{"suites":1,"tests":1,"passes":0,"pending":0,"failures":1,"start":"2024-01-01T00:00:00.000Z","end":"2024-01-01T00:01:00.000Z","duration":60000,"testsRegistered":1,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false},"results":[{"title":"Cypress API Tests Failed","fullTitle":"API execution failed with exit code","state":"failed","err":{"message":"Cypress API tests failed"}}],"meta":{"mocha":{"version":"7.0.0"},"mochawesome":{"version":"7.0.0","options":{}},"marge":{"options":{},"version":"6.2.0"}}}' > cypress/reports/mochawesome-api.json
            }
        env:
          CYPRESS_baseUrl: http://localhost:3000
          CYPRESS_apiUrl: http://localhost:3000

      - name: Gerar relatórios
        if: always() && !cancelled()
        continue-on-error: true
        run: |
          # Cria diretório de reports se não existir
          mkdir -p cypress/reports/html
          
          # Lista arquivos encontrados para debug
          echo "=== Arquivos no diretório cypress/reports ==="
          ls -la cypress/reports/ 2>/dev/null || echo "Diretório cypress/reports não existe"
          
          echo "=== Procurando arquivos mochawesome ==="
          find cypress/reports -name "mochawesome*" -type f 2>/dev/null || echo "Nenhum arquivo mochawesome encontrado"
          
          # Verifica se existem arquivos JSON do mochawesome para merge
          if ls cypress/reports/mochawesome*.json >/dev/null 2>&1; then
            echo "✅ Arquivos Mochawesome JSON encontrados:"
            ls cypress/reports/mochawesome*.json
            
            echo "Fazendo merge dos relatórios..."
            npx mochawesome-merge "cypress/reports/mochawesome*.json" > cypress/reports/merged-report.json || {
              echo "⚠️ Erro no merge, criando relatório vazio completo"
              echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0,"start":"2024-01-01T00:00:00.000Z","end":"2024-01-01T00:01:00.000Z","duration":0,"testsRegistered":0,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false},"results":[],"meta":{"mocha":{"version":"10.0.0"},"mochawesome":{"version":"7.1.3","options":{"reportDir":"cypress/reports","reportTitle":"Cypress Tests"}},"marge":{"options":{"reportDir":"cypress/reports/html"},"version":"6.2.0"}}}' > cypress/reports/merged-report.json
            }
            
            echo "Gerando relatório HTML..."
            npx marge cypress/reports/merged-report.json --reportDir cypress/reports/html --reportTitle "Cypress Tests" || echo "⚠️ Erro na geração do relatório HTML"
          else
            echo "⚠️ Nenhum arquivo Mochawesome JSON encontrado, criando relatório vazio completo"
            echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0,"start":"2024-01-01T00:00:00.000Z","end":"2024-01-01T00:01:00.000Z","duration":0,"testsRegistered":0,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false},"results":[],"meta":{"mocha":{"version":"10.0.0"},"mochawesome":{"version":"7.1.3","options":{"reportDir":"cypress/reports","reportTitle":"Cypress Tests"}},"marge":{"options":{"reportDir":"cypress/reports/html"},"version":"6.2.0"}}}' > cypress/reports/merged-report.json
            npx marge cypress/reports/merged-report.json --reportDir cypress/reports/html --reportTitle "Cypress Tests" || echo "⚠️ Erro na geração do relatório HTML"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && !cancelled()
        with:
          name: cypress-results
          path: |
            cypress/reports/
          retention-days: 7

      - name: Resumo da execução
        if: always() && !cancelled()
        run: |
          echo "=== RESUMO DA EXECUÇÃO ==="
          echo "Tipo: Testes de API REST"
          echo "API Status: $(curl -s http://localhost:3000/ > /dev/null 2>&1 && echo "✅ Online" || echo "❌ Offline")"
          echo "Relatórios JSON: $(find cypress/reports -name "*.json" 2>/dev/null | wc -l || echo "0")"
          if [ -f api.log ]; then
            echo "Logs da API: ✅ Disponíveis"
          else
            echo "Logs da API: ❌ Não encontrados"
          fi
          
          # Detecção dinâmica de categorias de testes
          echo ""
          echo "📊 Estrutura de testes detectada:"
          TOTAL_FILES=$(find cypress/e2e -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
          echo "   📁 Total: $TOTAL_FILES arquivos de teste"
          
          # Scan automático de diretórios de teste
          for dir in cypress/e2e/api/*/; do
            if [ -d "$dir" ]; then
              category=$(basename "$dir")
              count=$(find "$dir" -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
              case "$category" in
                "users") echo "   👥 Users: $count arquivos" ;;
                "tickets") echo "   🎫 Tickets: $count arquivos" ;;
                "schemas") echo "   📋 Schemas: $count arquivos" ;;
                "integration") echo "   🔄 Integration: $count arquivos" ;;
                "negative") echo "   ❌ Negative: $count arquivos" ;;
                *) echo "   📂 $category: $count arquivos" ;;
              esac
            fi
          done
          
          # Arquivos na raiz da API
          ROOT_FILES=$(find cypress/e2e/api -maxdepth 1 -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
          if [ "$ROOT_FILES" -gt 0 ]; then
            echo "   ⚙️ Config/Root: $ROOT_FILES arquivos"
          fi
          
          echo ""
          echo "✅ Execução dos testes Cypress completada"
          echo "📦 Artifacts disponíveis na aba Actions deste repositório"

      - name: Gerar Sumário no GitHub
        if: always() && !cancelled()
        run: |
          # Extrai estatísticas dos relatórios JSON do Cypress
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          
          # Processa todos os arquivos de relatório JSON
          if ls cypress/reports/mochawesome*.json >/dev/null 2>&1; then
            for report in cypress/reports/mochawesome*.json; do
              if [ -f "$report" ]; then
                # Extrai estatísticas usando jq ou python
                if command -v jq >/dev/null 2>&1; then
                  TESTS=$(jq -r '.stats.tests // 0' "$report")
                  PASSES=$(jq -r '.stats.passes // 0' "$report")
                  FAILURES=$(jq -r '.stats.failures // 0' "$report")
                  PENDING=$(jq -r '.stats.pending // 0' "$report")
                else
                  # Fallback usando grep e sed
                  TESTS=$(grep -o '"tests":[0-9]*' "$report" | head -1 | sed 's/"tests"://' || echo "0")
                  PASSES=$(grep -o '"passes":[0-9]*' "$report" | head -1 | sed 's/"passes"://' || echo "0")
                  FAILURES=$(grep -o '"failures":[0-9]*' "$report" | head -1 | sed 's/"failures"://' || echo "0")
                  PENDING=$(grep -o '"pending":[0-9]*' "$report" | head -1 | sed 's/"pending"://' || echo "0")
                fi
                
                TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
                PASSED_TESTS=$((PASSED_TESTS + PASSES))
                FAILED_TESTS=$((FAILED_TESTS + FAILURES))
                SKIPPED_TESTS=$((SKIPPED_TESTS + PENDING))
              fi
            done
          fi
          
          # Calcula porcentagens
          if [ "$TOTAL_TESTS" -gt 0 ]; then
            PASS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
            FAIL_RATE=$((FAILED_TESTS * 100 / TOTAL_TESTS))
          else
            PASS_RATE=0
            FAIL_RATE=0
          fi
          
          # Determina status geral
          if [ "$FAILED_TESTS" -eq 0 ] && [ "$TOTAL_TESTS" -gt 0 ]; then
            STATUS="✅ SUCESSO"
            STATUS_EMOJI="🎉"
          elif [ "$FAILED_TESTS" -gt 0 ]; then
            STATUS="❌ FALHAS DETECTADAS"
            STATUS_EMOJI="🔥"
          else
            STATUS="⚠️ NENHUM TESTE EXECUTADO"
            STATUS_EMOJI="❓"
          fi
          
          # Conta arquivos e estrutura
          TOTAL_FILES=$(find cypress/e2e -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
          
          # Gera o GitHub Summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ${STATUS_EMOJI} Relatório de Testes Cypress - Helpdesk API
          
          ## 📊 Estatísticas Gerais
          
          | Métrica | Valor | Porcentagem |
          |---------|-------|-------------|
          | **Status Geral** | **${STATUS}** | - |
          | **Total de Testes** | **${TOTAL_TESTS}** | 100% |
          | **✅ Aprovados** | ${PASSED_TESTS} | ${PASS_RATE}% |
          | **❌ Falharam** | ${FAILED_TESTS} | ${FAIL_RATE}% |
          | **⏭️ Skip's** | ${SKIPPED_TESTS} | - |
          
          ## 📁 Estrutura de Testes
          
          | Categoria | Arquivos | Descrição |
          |-----------|----------|-----------|
          EOF
          
          # Adiciona estrutura dinâmica ao summary
          for dir in cypress/e2e/api/*/; do
            if [ -d "$dir" ]; then
              category=$(basename "$dir")
              count=$(find "$dir" -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
              case "$category" in
                "users") 
                  echo "| 👥 Users | ${count} | Testes de usuários e autenticação |" >> $GITHUB_STEP_SUMMARY
                  ;;
                "tickets") 
                  echo "| 🎫 Tickets | ${count} | Testes de tickets e workflow |" >> $GITHUB_STEP_SUMMARY
                  ;;
                "schemas") 
                  echo "| 📋 Schemas | ${count} | Validação de contratos da API |" >> $GITHUB_STEP_SUMMARY
                  ;;
                "integration") 
                  echo "| 🔄 Integration | ${count} | Testes de integração completa |" >> $GITHUB_STEP_SUMMARY
                  ;;
                "negative") 
                  echo "| ❌ Negative | ${count} | Testes de casos de erro |" >> $GITHUB_STEP_SUMMARY
                  ;;
                *) 
                  echo "| 📂 ${category} | ${count} | Testes de ${category} |" >> $GITHUB_STEP_SUMMARY
                  ;;
              esac
            fi
          done
          
          # Adiciona arquivos na raiz se existirem
          ROOT_FILES=$(find cypress/e2e/api -maxdepth 1 -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
          if [ "$ROOT_FILES" -gt 0 ]; then
            echo "| ⚙️ Config/Root | ${ROOT_FILES} | Testes de configuração |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Adiciona seção de artifacts
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ## 📦 Artifacts Gerados
          
          | Tipo | Quantidade | Localização |
          |------|------------|-------------|
          | 📋 Relatórios HTML | 1 | \`cypress/reports/html/\` |
          | � Relatórios JSON | 1+ | \`cypress/reports/\` |
          
          ## 🔍 Como Visualizar os Resultados
          
          1. **📦 Download dos Artifacts**: Clique em "cypress-results" na seção Artifacts desta execução
          2. **📋 Relatório HTML**: Abra o arquivo \`merged-report.html\` no seu navegador
          3. **📊 Dados JSON**: Analise os dados detalhados nos arquivos JSON
          
          ---
          
          **🤖 Gerado automaticamente pelo workflow de CI/CD** | **⏰ $(date '+%d/%m/%Y às %H:%M:%S')**
          EOF
