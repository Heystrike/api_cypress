name: Cypress Tests for Helpdesk API

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:    # Executa diariamente √†s 2:00 AM UTC
    - cron: "0 2 * * *"

jobs:
  cypress-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Setup Helpdesk API
        if: success() && !cancelled()
        run: |
          # Tenta clonar a API Helpdesk
          if git clone https://github.com/automacaohml/helpdesk-api.git api; then
            echo "‚úÖ Reposit√≥rio da API clonado com sucesso"
            cd api
            
            # Instala depend√™ncias da API
            npm install
            
            # Inicia a API em background
            nohup npm start > ../api.log 2>&1 &
            echo "‚úÖ API iniciada em background"
            
            # Aguarda um momento para a API inicializar
            sleep 5
            
          else
            echo "‚ö†Ô∏è N√£o foi poss√≠vel clonar a API, assumindo API j√° rodando"
          fi

      - name: Aguardar API estar dispon√≠vel
        run: |
          echo "üîÑ Aguardando API ficar dispon√≠vel..."
          
          # Aguarda at√© 60 segundos pela API
          for i in {1..30}; do
            if curl -s http://localhost:3000/ > /dev/null 2>&1 || 
               curl -s http://localhost:3000/health > /dev/null 2>&1 || 
               curl -s http://localhost:3000/users > /dev/null 2>&1; then
              echo "‚úÖ API dispon√≠vel na porta 3000"
              break
            fi
            echo "Tentativa $i/30 - Aguardando API..."
            sleep 2
          done
          
          # Verifica se API est√° realmente funcionando
          echo "Testando endpoints da API..."
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Health endpoint OK"
          elif curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "‚úÖ Root endpoint OK" 
          elif curl -f http://localhost:3000/users > /dev/null 2>&1; then
            echo "‚úÖ Users endpoint OK"
          else
            echo "‚ùå Erro: Nenhum endpoint da API est√° respondendo"
            cat api.log
            exit 1
          fi

      - name: Debug - Verificar status da API
        if: always() && !cancelled()
        run: |
          echo "=== Status da API ==="
          curl -s http://localhost:3000/health || echo "Health endpoint n√£o dispon√≠vel"
          curl -s http://localhost:3000/users || echo "Users endpoint n√£o dispon√≠vel"
          ps aux | grep node || echo "Nenhum processo Node encontrado"

      - name: Executar testes Cypress
        if: always() && !cancelled()
        continue-on-error: true
        run: |
          echo "üöÄ Iniciando testes de API com Cypress"
          
          # Cria diret√≥rios necess√°rios
          mkdir -p cypress/reports cypress/videos cypress/screenshots
          
          # Executa Cypress para testes de API (headless por padr√£o)
          npx cypress run \
            --reporter mochawesome \
            --reporter-options "reportDir=cypress/reports,reportFilename=mochawesome-api,overwrite=false,html=false,json=true" \
            --config "video=true,screenshotOnRunFailure=true,defaultCommandTimeout=10000,requestTimeout=15000" \
            || {
              echo "‚ö†Ô∏è Cypress falhou, mas continuando para gerar artifacts..."
              # Cria um relat√≥rio b√°sico para evitar falhas downstream
              echo '{"stats":{"suites":1,"tests":1,"passes":0,"pending":0,"failures":1,"start":"2024-01-01T00:00:00.000Z","end":"2024-01-01T00:01:00.000Z","duration":60000,"testsRegistered":1,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false},"results":[{"title":"Cypress API Tests Failed","fullTitle":"API execution failed with exit code","state":"failed","err":{"message":"Cypress API tests failed"}}],"meta":{"mocha":{"version":"7.0.0"},"mochawesome":{"version":"7.0.0","options":{}},"marge":{"options":{},"version":"6.2.0"}}}' > cypress/reports/mochawesome-api.json
            }
        env:
          CYPRESS_baseUrl: http://localhost:3000
          CYPRESS_apiUrl: http://localhost:3000

      - name: Gerar relat√≥rios
        if: always() && !cancelled()
        continue-on-error: true
        run: |
          # Cria diret√≥rio de reports se n√£o existir
          mkdir -p cypress/reports/html
          
          # Lista arquivos encontrados para debug
          echo "=== Arquivos no diret√≥rio cypress/reports ==="
          ls -la cypress/reports/ 2>/dev/null || echo "Diret√≥rio cypress/reports n√£o existe"
          
          echo "=== Procurando arquivos mochawesome ==="
          find cypress/reports -name "mochawesome*" -type f 2>/dev/null || echo "Nenhum arquivo mochawesome encontrado"
          
          # Verifica se existem arquivos JSON do mochawesome para merge
          if ls cypress/reports/mochawesome*.json >/dev/null 2>&1; then
            echo "‚úÖ Arquivos Mochawesome JSON encontrados:"
            ls cypress/reports/mochawesome*.json
            
            echo "Fazendo merge dos relat√≥rios..."
            npx mochawesome-merge "cypress/reports/mochawesome*.json" > cypress/reports/merged-report.json || {
              echo "‚ö†Ô∏è Erro no merge, criando relat√≥rio vazio completo"
              echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0,"start":"2024-01-01T00:00:00.000Z","end":"2024-01-01T00:01:00.000Z","duration":0,"testsRegistered":0,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false},"results":[],"meta":{"mocha":{"version":"10.0.0"},"mochawesome":{"version":"7.1.3","options":{"reportDir":"cypress/reports","reportTitle":"Cypress Tests"}},"marge":{"options":{"reportDir":"cypress/reports/html"},"version":"6.2.0"}}}' > cypress/reports/merged-report.json
            }
            
            echo "Gerando relat√≥rio HTML..."
            npx marge cypress/reports/merged-report.json --reportDir cypress/reports/html --reportTitle "Cypress Tests" || echo "‚ö†Ô∏è Erro na gera√ß√£o do relat√≥rio HTML"
          else
            echo "‚ö†Ô∏è Nenhum arquivo Mochawesome JSON encontrado, criando relat√≥rio vazio completo"
            echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0,"start":"2024-01-01T00:00:00.000Z","end":"2024-01-01T00:01:00.000Z","duration":0,"testsRegistered":0,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false},"results":[],"meta":{"mocha":{"version":"10.0.0"},"mochawesome":{"version":"7.1.3","options":{"reportDir":"cypress/reports","reportTitle":"Cypress Tests"}},"marge":{"options":{"reportDir":"cypress/reports/html"},"version":"6.2.0"}}}' > cypress/reports/merged-report.json
            npx marge cypress/reports/merged-report.json --reportDir cypress/reports/html --reportTitle "Cypress Tests" || echo "‚ö†Ô∏è Erro na gera√ß√£o do relat√≥rio HTML"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && !cancelled()
        with:
          name: cypress-results
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/reports/
          retention-days: 7

      - name: Resumo da execu√ß√£o
        if: always() && !cancelled()
        run: |
          echo "=== RESUMO DA EXECU√á√ÉO ==="
          echo "Tipo: Testes de API REST"
          echo "API Status: $(curl -s http://localhost:3000/ > /dev/null 2>&1 && echo "‚úÖ Online" || echo "‚ùå Offline")"
          echo "Videos gerados: $(find cypress/videos -name "*.mp4" 2>/dev/null | wc -l || echo "0")"
          echo "Screenshots capturados: $(find cypress/screenshots -name "*.png" 2>/dev/null | wc -l || echo "0")"
          echo "Relat√≥rios JSON: $(find cypress/reports -name "*.json" 2>/dev/null | wc -l || echo "0")"
          if [ -f api.log ]; then
            echo "Logs da API: ‚úÖ Dispon√≠veis"
          else
            echo "Logs da API: ‚ùå N√£o encontrados"
          fi
          
          # Detec√ß√£o din√¢mica de categorias de testes
          echo ""
          echo "üìä Estrutura de testes detectada:"
          TOTAL_FILES=$(find cypress/e2e -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
          echo "   üìÅ Total: $TOTAL_FILES arquivos de teste"
          
          # Scan autom√°tico de diret√≥rios de teste
          for dir in cypress/e2e/api/*/; do
            if [ -d "$dir" ]; then
              category=$(basename "$dir")
              count=$(find "$dir" -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
              case "$category" in
                "users") echo "   üë• Users: $count arquivos" ;;
                "tickets") echo "   üé´ Tickets: $count arquivos" ;;
                "schemas") echo "   üìã Schemas: $count arquivos" ;;
                "integration") echo "   üîÑ Integration: $count arquivos" ;;
                "negative") echo "   ‚ùå Negative: $count arquivos" ;;
                *) echo "   üìÇ $category: $count arquivos" ;;
              esac
            fi
          done
          
          # Arquivos na raiz da API
          ROOT_FILES=$(find cypress/e2e/api -maxdepth 1 -name "*.cy.js" 2>/dev/null | wc -l || echo "0")
          if [ "$ROOT_FILES" -gt 0 ]; then
            echo "   ‚öôÔ∏è Config/Root: $ROOT_FILES arquivos"
          fi
          
          echo ""
          echo "‚úÖ Execu√ß√£o dos testes Cypress completada"
          echo "üì¶ Artifacts dispon√≠veis na aba Actions deste reposit√≥rio"
