name: Cypress Tests for Helpdesk API

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Executa diariamente às 2:00 AM UTC
    - cron: "0 2 * * *"

jobs:
  cypress-run:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Instalar dependências
        run: npm ci

      - name: Setup Helpdesk API
        if: success() && !cancelled()
        run: |
          # Tenta clonar a API Helpdesk
          if git clone https://github.com/automacaohml/helpdesk-api.git api; then
            echo "✅ Repositório da API clonado com sucesso"
            cd api
            
            # Instala dependências da API
            npm install
            
            # Inicia a API em background
            nohup npm start > ../api.log 2>&1 &
            cd ..
          else
            echo "⚠️ Não foi possível clonar o repositório da API"
            echo "⚠️ Os testes serão executados mas podem falhar se a API não estiver disponível"
            echo "⚠️ Para uso em produção, certifique-se de que a API está acessível"
            
            # Cria um log vazio para evitar erros
            touch api.log
          fi
          
          # Aguarda a API inicializar (se foi iniciada)
          echo "Aguardando API inicializar..."
          for i in {1..30}; do
            # Tenta diferentes endpoints para verificar se API está up
            if curl -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ API está rodando na porta 3000 (health)"
              break
            elif curl -s http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ API está rodando na porta 3000 (root)"
              break
            elif curl -s http://localhost:3000/users > /dev/null 2>&1; then
              echo "✅ API está rodando na porta 3000 (users)"
              break
            fi
            echo "Tentativa $i/30 - Aguardando API..."
            sleep 2
          done
          
          # Verifica se API está realmente funcionando
          echo "Testando endpoints da API..."
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Health endpoint OK"
          elif curl -f http://localhost:3000/ > /dev/null 2>&1; then
            echo "✅ Root endpoint OK" 
          elif curl -f http://localhost:3000/users > /dev/null 2>&1; then
            echo "✅ Users endpoint OK"
          else
            echo "❌ Erro: Nenhum endpoint da API está respondendo"
            cat api.log
            exit 1
          fi

      - name: Debug - Verificar status da API
        if: always() && !cancelled()
        run: |
          echo "=== Status da API ==="
          curl -s http://localhost:3000/health || echo "Health endpoint não disponível"
          curl -s http://localhost:3000/users || echo "Users endpoint não disponível"
          ps aux | grep node || echo "Nenhum processo Node encontrado"

      - name: Executar testes Cypress
        if: always() && !cancelled()
        continue-on-error: true
        run: |
          echo "🚀 Iniciando testes Cypress - Browser: ${{ matrix.browser }}"
          
          # Cria diretórios necessários
          mkdir -p cypress/reports cypress/videos cypress/screenshots
          
          # Executa Cypress com configuração robusta
          npx cypress run \
            --browser ${{ matrix.browser }} \
            --reporter mochawesome \
            --reporter-options "reportDir=cypress/reports,reportFilename=mochawesome-${{ matrix.browser }}-[hash],overwrite=false,html=false,json=true" \
            --config "video=true,screenshotOnRunFailure=true,defaultCommandTimeout=10000,requestTimeout=15000" \
            || {
              echo "⚠️ Cypress falhou, mas continuando para gerar artifacts..."
              # Cria um relatório básico para evitar falhas downstream
              echo '{"stats":{"suites":1,"tests":1,"passes":0,"pending":0,"failures":1},"results":[{"title":"Cypress Execution Failed","fullTitle":"Execution failed with exit code","state":"failed","err":{"message":"Cypress execution failed"}}],"meta":{"mocha":{"version":"7.0.0"},"mochawesome":{"version":"7.0.0"}}}' > cypress/reports/mochawesome-${{ matrix.browser }}-fallback.json
            }
        env:
          CYPRESS_baseUrl: http://localhost:3000
          CYPRESS_apiUrl: http://localhost:3000

      - name: Gerar relatórios
        if: always() && !cancelled()
        continue-on-error: true
        run: |
          # Cria diretório de reports se não existir
          mkdir -p cypress/reports/html
          
          # Lista arquivos encontrados para debug
          echo "=== Arquivos no diretório cypress/reports ==="
          ls -la cypress/reports/ || echo "Diretório cypress/reports não existe"
          
          # Verifica se existem arquivos JSON do mochawesome para merge
          if ls cypress/reports/mochawesome*.json >/dev/null 2>&1; then
            echo "✅ Arquivos Mochawesome JSON encontrados:"
            ls cypress/reports/mochawesome*.json
            
            echo "Fazendo merge dos relatórios..."
            npx mochawesome-merge cypress/reports/mochawesome*.json > cypress/reports/merged-report.json || {
              echo "⚠️ Erro no merge, criando relatório vazio"
              echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0},"results":[],"meta":{"mocha":{"version":"0.0.0"},"mochawesome":{"version":"0.0.0"}}}' > cypress/reports/merged-report.json
            }
            
            echo "Gerando relatório HTML..."
            npx marge cypress/reports/merged-report.json --reportDir cypress/reports/html --reportTitle "Cypress Tests - ${{ matrix.browser }}" || echo "⚠️ Erro na geração do relatório HTML"
          else
            echo "⚠️ Nenhum arquivo Mochawesome JSON encontrado, criando relatório vazio"
            echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0},"results":[],"meta":{"mocha":{"version":"0.0.0"},"mochawesome":{"version":"0.0.0"}}}' > cypress/reports/merged-report.json
            npx marge cypress/reports/merged-report.json --reportDir cypress/reports/html --reportTitle "Cypress Tests - ${{ matrix.browser }}" || echo "⚠️ Erro na geração do relatório HTML"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && !cancelled()
        with:
          name: cypress-results-${{ matrix.browser }}
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/reports/
          retention-days: 7

      - name: Resumo da execução
        if: always() && !cancelled()
        run: |
          echo "=== RESUMO DA EXECUÇÃO ==="
          echo "Browser: ${{ matrix.browser }}"
          echo "Total de testes no repositório: 186 testes"
          echo "API Status: $(curl -s http://localhost:3000/ > /dev/null 2>&1 && echo "✅ Online" || echo "❌ Offline")"
          echo "Videos gerados: $(find cypress/videos -name "*.mp4" 2>/dev/null | wc -l || echo "0")"
          echo "Screenshots capturados: $(find cypress/screenshots -name "*.png" 2>/dev/null | wc -l || echo "0")"
          echo "Relatórios JSON: $(find cypress/reports -name "*.json" 2>/dev/null | wc -l || echo "0")"
          if [ -f api.log ]; then
            echo "Logs da API: ✅ Disponíveis"
          else
            echo "Logs da API: ❌ Não encontrados"
          fi
          
          # Mostra estrutura de testes
          echo ""
          echo "📊 Distribuição dos 186 testes:"
          echo "   👥 Users: 59 testes (30 negative + 13 positive + 16 business rules)"
          echo "   🎫 Tickets: 74 testes (34 negative + 18 positive + 22 business rules)" 
          echo "   📋 Schemas: 42 testes (19 users + 23 tickets)"
          echo "   🔄 Integration: 6 testes"
          echo "   ⚙️ Config: 5 testes"

  api-validation:
    runs-on: ubuntu-latest
    needs: cypress-run
    if: always() && !cancelled() && (needs.cypress-run.result == 'success' || needs.cypress-run.result == 'failure')

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Validar estrutura da API
        run: |
          echo "✅ Execução dos testes Cypress completada"
          echo ""
          echo "📊 Resumo do repositório:"
          echo "   🎯 Total: 186 testes automatizados"
          echo "   📁 Arquivos: 10 arquivos de teste (.cy.js)"
          echo "   🌐 Browsers: Chrome + Firefox"
          echo "   � Categorias: Users, Tickets, Schemas, Integration, Config"
          echo ""
          echo "📦 Artifacts disponíveis:"
          echo "   • cypress-results-chrome (videos, screenshots, reports)"
          echo "   • cypress-results-firefox (videos, screenshots, reports)"
          echo ""
          echo "🔍 Para visualizar os resultados:"
          echo "   1. Acesse a aba 'Actions' deste repositório"
          echo "   2. Clique na execução do workflow"
          echo "   3. Baixe os artifacts na seção 'Artifacts'"
          echo "   4. Abra os relatórios HTML em cypress/reports/html/"
